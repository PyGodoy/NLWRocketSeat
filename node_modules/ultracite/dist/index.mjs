#!/usr/bin/env node
var H=Object.defineProperty;var pt=Object.getOwnPropertyDescriptor;var mt=Object.getOwnPropertyNames;var ft=Object.prototype.hasOwnProperty;var L=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(t,s)=>(typeof require<"u"?require:t)[s]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')}),ve=e=>t=>{var s=e[t];if(s)return s();throw new Error("Module not found in bundle: "+t)};var i=(e,t)=>()=>(e&&(t=e(e=0)),t);var l=(e,t)=>{for(var s in t)H(e,s,{get:t[s],enumerable:!0})},gt=(e,t,s,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let a of mt(t))!ft.call(e,a)&&a!==s&&H(e,a,{get:()=>t[a],enumerable:!(n=pt(t,a))||n.enumerable});return e};var c=e=>gt(H({},"__esModule",{value:!0}),e);var Ce={};l(Ce,{format:()=>G});import{execSync as ht}from"child_process";import yt from"process";var G,B=i(()=>{"use strict";G=(e,t={})=>{try{let s=e.length>0?e.map(a=>`"${a}"`).join(" "):"./",n=t.unsafe?" --unsafe":"";ht(`npx @biomejs/biome check --write${n} ${s}`,{stdio:"inherit"})}catch(s){let n=s instanceof Error?s.message:"Unknown error";console.error("Failed to run Ultracite:",n),yt.exit(1)}}});var je={};l(je,{exists:()=>o,isMonorepo:()=>P});import{access as wt,readFile as xt}from"fs/promises";import{parse as bt}from"jsonc-parser";var o,P,u=i(()=>{"use strict";o=async e=>{try{return await wt(e),!0}catch{return!1}},P=async()=>{if(await o("pnpm-workspace.yaml"))return!0;try{let e=bt(await xt("package.json","utf-8"));return e?!!e.workspaces:!1}catch{return!1}}});var Ae={};l(Ae,{biome:()=>v});import{readFile as kt,writeFile as Se}from"fs/promises";import Dt from"deepmerge";import{parse as vt}from"jsonc-parser";var Ue,_,v,Y=i(()=>{"use strict";u();Ue={$schema:"https://biomejs.dev/schemas/2.0.5/schema.json",extends:["ultracite"]},_=async()=>await o("./biome.json")?"./biome.json":"./biome.jsonc",v={exists:async()=>{let e=await _();return o(e)},create:async()=>{let e=await _();return Se(e,JSON.stringify(Ue,null,2))},update:async()=>{let e=await _(),t=await kt(e,"utf-8"),n=vt(t)||{},a=n.extends&&Array.isArray(n.extends)?n.extends:[];a.includes("ultracite")||(n.extends=[...a,"ultracite"]);let p={$schema:Ue.$schema},h=Dt(n,p);await Se(e,JSON.stringify(h,null,2))}}});var Ct,r,f=i(()=>{"use strict";Ct=["Don't use `accessKey` attribute on any HTML element.",'Don\'t set `aria-hidden="true"` on focusable elements.',"Don't add ARIA roles, states, and properties to elements that don't support them.","Don't use distracting elements like `<marquee>` or `<blink>`.","Only use the `scope` prop on `<th>` elements.","Don't assign non-interactive ARIA roles to interactive HTML elements.","Make sure label elements have text content and are associated with an input.","Don't assign interactive ARIA roles to non-interactive HTML elements.","Don't assign `tabIndex` to non-interactive HTML elements.","Don't use positive integers for `tabIndex` property.",'Don\'t include "image", "picture", or "photo" in img `alt` prop.',"Don't use explicit role property that's the same as the implicit/default role.","Make static elements with click handlers use a valid role attribute.","Always include a `title` element for SVG elements.","Give all elements requiring alt text meaningful information for screen readers.","Make sure anchors have content that's accessible to screen readers.","Assign `tabIndex` to non-interactive HTML elements with `aria-activedescendant`.","Include all required ARIA attributes for elements with ARIA roles.","Make sure ARIA properties are valid for the element's supported roles.","Always include a `type` attribute for button elements.","Make elements with interactive roles and handlers focusable.","Give heading elements content that's accessible to screen readers (not hidden with `aria-hidden`).","Always include a `lang` attribute on the html element.","Always include a `title` attribute for iframe elements.","Accompany `onClick` with at least one of: `onKeyUp`, `onKeyDown`, or `onKeyPress`.","Accompany `onMouseOver`/`onMouseOut` with `onFocus`/`onBlur`.","Include caption tracks for audio and video elements.","Use semantic elements instead of role attributes in JSX.","Make sure all anchors are valid and navigable.","Ensure all ARIA properties (`aria-*`) are valid.","Use valid, non-abstract ARIA roles for elements with ARIA roles.","Use valid ARIA state and property values.","Use valid values for the `autocomplete` attribute on input elements.","Use correct ISO language/country codes for the `lang` attribute.","Don't use consecutive spaces in regular expression literals.","Don't use the `arguments` object.","Don't use primitive type aliases or misleading types.","Don't use the comma operator.","Don't use empty type parameters in type aliases and interfaces.","Don't write functions that exceed a given Cognitive Complexity score.","Don't nest describe() blocks too deeply in test files.","Don't use unnecessary boolean casts.","Don't use unnecessary callbacks with flatMap.","Use for...of statements instead of Array.forEach.","Don't create classes that only have static members (like a static namespace).","Don't use this and super in static contexts.","Don't use unnecessary catch clauses.","Don't use unnecessary constructors.","Don't use unnecessary continue statements.","Don't export empty modules that don't change anything.","Don't use unnecessary escape sequences in regular expression literals.","Don't use unnecessary fragments.","Don't use unnecessary labels.","Don't use unnecessary nested block statements.","Don't rename imports, exports, and destructured assignments to the same name.","Don't use unnecessary string or template literal concatenation.","Don't use String.raw in template literals when there are no escape sequences.","Don't use useless case statements in switch statements.","Don't use ternary operators when simpler alternatives exist.","Don't use useless `this` aliasing.","Don't use any or unknown as type constraints.","Don't initialize variables to undefined.","Don't use void operators (they're not familiar).","Use arrow functions instead of function expressions.","Use Date.now() to get milliseconds since the Unix Epoch.","Use .flatMap() instead of map().flat() when possible.","Use literal property access instead of computed property access.","Don't use parseInt() or Number.parseInt() when binary, octal, or hexadecimal literals work.","Use concise optional chaining instead of chained logical expressions.","Use regular expression literals instead of the RegExp constructor when possible.","Don't use number literal object member names that aren't base 10 or use underscore separators.","Remove redundant terms from logical expressions.","Use while loops instead of for loops when you don't need initializer and update expressions.","Don't pass children as props.","Don't reassign const variables.","Don't use constant expressions in conditions.","Don't use `Math.min` and `Math.max` to clamp values when the result is constant.","Don't return a value from a constructor.","Don't use empty character classes in regular expression literals.","Don't use empty destructuring patterns.","Don't call global object properties as functions.","Don't declare functions and vars that are accessible outside their block.","Make sure builtins are correctly instantiated.","Don't use super() incorrectly inside classes. Also check that super() is called in classes that extend other constructors.","Don't use variables and function parameters before they're declared.","Don't use 8 and 9 escape sequences in string literals.","Don't use literal numbers that lose precision.","Don't use the return value of React.render.","Don't assign a value to itself.","Don't return a value from a setter.","Don't compare expressions that modify string case with non-compliant values.","Don't use lexical declarations in switch clauses.","Don't use variables that haven't been declared in the document.","Don't write unreachable code.","Make sure super() is called exactly once on every code path in a class constructor before this is accessed if the class has a superclass.","Don't use control flow statements in finally blocks.","Don't use optional chaining where undefined values aren't allowed.","Don't have unused function parameters.","Don't have unused imports.","Don't have unused labels.","Don't have unused private class members.","Don't have unused variables.","Make sure void (self-closing) elements don't have children.","Don't return a value from a function that has a 'void' return type.","Make sure all dependencies are correctly specified in React hooks.","Make sure all React hooks are called from the top level of component functions.","Use isNaN() when checking for NaN.","Don't forget key props in iterators and collection literals.",'Make sure "for" loop update clauses move the counter in the right direction.',"Make sure typeof expressions are compared to valid values.","Make sure generator functions contain yield.","Don't use await inside loops.","Don't use bitwise operators.","Don't use expressions where the operation doesn't change the value.","Don't destructure props inside JSX components in Solid projects.","Make sure Promise-like statements are handled appropriately.","Don't use __dirname and __filename in the global scope.","Prevent import cycles.","Don't define React components inside other components.","Don't use event handlers on non-interactive elements.","Don't assign to React component props.","Don't use configured elements.","Don't hardcode sensitive data like API keys and tokens.","Don't let variable declarations shadow variables from outer scopes.","Don't use the TypeScript directive @ts-ignore.","Prevent duplicate polyfills from Polyfill.io.","Don't use useless backreferences in regular expressions that always match empty strings.","Don't use unnecessary escapes in string literals.","Don't use useless undefined.","Make sure getters and setters for the same property are next to each other in class and object definitions.","Make sure object literals are declared consistently (defaults to explicit definitions).","Use static Response methods instead of new Response() constructor when possible.","Make sure switch-case statements are exhaustive.","Make sure the `preconnect` attribute is used when using Google Fonts.","Use `Array#{indexOf,lastIndexOf}()` instead of `Array#{findIndex,findLastIndex}()` when looking for the index of an item.","Make sure iterable callbacks return consistent values.",'Use `with { type: "json" }` for JSON module imports.',"Use numeric separators in numeric literals.","Use object spread instead of `Object.assign()` when constructing new objects.","Always use the radix argument when using `parseInt()`.","Make sure JSDoc comment lines start with a single asterisk, except for the first one.","Include a description parameter for `Symbol()`.","Don't use spread (`...`) syntax on accumulators.","Don't use the `delete` operator.","Don't access namespace imports dynamically.","Don't use `<img>` elements in Next.js projects.","Don't use namespace imports.","Declare regex literals at the top level.",'Don\'t use `target="_blank"` without `rel="noopener"`.',"Don't use dangerous JSX props.","Don't use both `children` and `dangerouslySetInnerHTML` props on the same element.","Don't use global `eval()`.","Don't use callbacks in asynchronous tests and hooks.","Don't use TypeScript enums.","Don't export imported variables.","Don't use `<head>` elements in Next.js projects.","Don't add type annotations to variables, parameters, and class properties that are initialized with literal expressions.","Don't use TypeScript namespaces.","Don't use negation in `if` statements that have `else` clauses.","Don't use nested ternary expressions.","Don't use non-null assertions with the `!` postfix operator.","Don't reassign function parameters.","Don't use parameter properties in class constructors.","This rule lets you specify global variable names you don't want to use in your application.","Don't use specified modules when loaded by import or require.","Don't use user-defined types.","Don't use constants whose value is the upper-case version of their name.","Use `String.slice()` instead of `String.substr()` and `String.substring()`.","Don't use template literals if you don't need interpolation or special-character handling.","Don't use `else` blocks when the `if` block breaks early.","Don't use yoda expressions.","Don't use Array constructors.","Use `as const` instead of literal types and type annotations.","Use `at()` instead of integer index access.","Follow curly brace conventions.","Use `else if` instead of nested `if` statements in `else` clauses.","Use single `if` statements instead of nested `if` clauses.","Use either `T[]` or `Array<T>` consistently.","Use `new` for all builtins except `String`, `Number`, and `Boolean`.","Use consistent accessibility modifiers on class properties and methods.","Use `const` declarations for variables that are only assigned once.","Put default function parameters and optional function parameters last.","Include a `default` clause in switch statements.","Initialize each enum member value explicitly.","Use the `**` operator instead of `Math.pow`.","Use `export type` for types.","Use `for-of` loops when you need the index to extract an item from the iterated array.","Use `<>...</>` instead of `<Fragment>...</Fragment>`.","Use `import type` for types.","Make sure all enum members are literal values.","Use `node:assert/strict` over `node:assert`.","Use the `node:` protocol for Node.js builtin modules.","Use Number properties instead of global ones.","Don't add extra closing tags for components without children.","Use assignment operator shorthand where possible.","Use function types instead of object types with call signatures.","Use template literals over string concatenation.","Use `new` when throwing an error.","Don't throw non-Error values.","Use `String.trimStart()` and `String.trimEnd()` over `String.trimLeft()` and `String.trimRight()`.","Use standard constants instead of approximated literals.","Don't use Array index in keys.","Don't assign values in expressions.","Don't use async functions as Promise executors.","Don't reassign exceptions in catch clauses.","Don't reassign class members.","Don't insert comments as text nodes.","Don't compare against -0.","Don't use labeled statements that aren't loops.","Don't use void type outside of generic or return types.","Don't use console.","Don't use TypeScript const enum.","Don't use control characters and escape sequences that match control characters in regular expression literals.","Don't use debugger.","Don't assign directly to document.cookie.","Don't import next/document outside of pages/_document.jsx in Next.js projects.","Use `===` and `!==`.","Don't use duplicate case labels.","Don't use duplicate class members.","Don't use duplicate conditions in if-else-if chains.","Don't assign JSX properties multiple times.","Don't use two keys with the same name inside objects.","Don't use duplicate function parameter names.","Don't have duplicate hooks in describe blocks.","Don't use empty block statements and static blocks.","Don't declare empty interfaces.","Don't let variables evolve into any type through reassignments.","Don't use the any type.","Don't use export or module.exports in test files.","Don't misuse the non-null assertion operator (!) in TypeScript files.","Don't let switch clauses fall through.","Don't use focused tests.","Don't reassign function declarations.","Don't allow assignments to native objects and read-only global variables.","Use Number.isFinite instead of global isFinite.","Use Number.isNaN instead of global isNaN.","Don't use the next/head module in pages/_document.js on Next.js projects.","Don't use implicit any type on variable declarations.","Don't assign to imported bindings.","Don't use irregular whitespace characters.","Don't use labels that share a name with a variable.","Don't use characters made with multiple code points in character class syntax.","Make sure to use new and constructor properly.","Make sure the assertion function, like expect, is placed inside an it() function call.","Don't use shorthand assign when the variable appears on both sides.","Don't use octal escape sequences in string literals.","Don't use Object.prototype builtins directly.","Don't redeclare variables, functions, classes, and types in the same scope.",`Don't have redundant "use strict".`,"Don't compare things where both sides are exactly the same.","Don't let identifiers shadow restricted names.","Don't use disabled tests.","Don't use sparse arrays (arrays with holes).",'Watch out for possible "wrong" semicolons inside JSX elements.',"Don't use template literal placeholder syntax in regular strings.","Don't use the then property.","Don't merge interfaces and classes unsafely.","Don't use unsafe negation.","Don't use var.","Don't use with statements in non-strict contexts.","Don't use overload signatures that aren't next to each other.","Make sure async functions actually use await.","Make sure default clauses in switch statements come last.","Make sure to pass a message value when creating a built-in error.","Make sure get methods always return a value.","Use a recommended display strategy with Google Fonts.","Make sure for-in loops include an if statement.","Use Array.isArray() instead of instanceof Array.","Use the namespace keyword instead of the module keyword to declare TypeScript namespaces.","Make sure to use the digits argument with Number#toFixed().",'Make sure to use the "use strict" directive in script files.'],r=`---
description: Ultracite Rules
globs: "**/*.{ts,tsx,js,jsx}"
alwaysApply: true
---

${Ct.map(e=>`- ${e}`).join(`
`)}`});var Re={};l(Re,{claude:()=>C});import{mkdir as Me,writeFile as Fe}from"fs/promises";var K,C,Z=i(()=>{"use strict";f();u();K="./.claude/CLAUDE.md",C={exists:()=>o(K),create:async()=>{await Me(".claude",{recursive:!0}),await Fe(K,r)},update:async()=>{await Me(".claude",{recursive:!0}),await Fe(K,r)}}});var $e={};l($e,{codex:()=>j});import{writeFile as Ie}from"fs/promises";var V,j,X=i(()=>{"use strict";f();u();V="./AGENTS.md",j={exists:()=>o(V),create:async()=>{await Ie(V,r)},update:async()=>{await Ie(V,r)}}});var Oe={};l(Oe,{cursor:()=>S});import{mkdir as Pe,writeFile as Ne}from"fs/promises";var Q,S,ee=i(()=>{"use strict";f();u();Q="./.cursor/rules/ultracite.mdc",S={exists:()=>o(Q),create:async()=>{await Pe(".cursor/rules",{recursive:!0}),await Ne(Q,r)},update:async()=>{await Pe(".cursor/rules",{recursive:!0}),await Ne(Q,r)}}});var We={};l(We,{husky:()=>w});import{execSync as jt}from"child_process";import{mkdir as St,readFile as Ut,writeFile as Je}from"fs/promises";var Te,N,w,te=i(()=>{"use strict";u();Te="npx ultracite format",N="./.husky/pre-commit",w={exists:()=>o(N),install:e=>{jt(`${e} -D husky`)},create:async()=>{await St(".husky",{recursive:!0}),await Je(N,Te)},update:async()=>{let e=await Ut(N,"utf-8");await Je(N,`${e}
${Te}`)}}});var qe={};l(qe,{lefthook:()=>b});import{execSync as ze}from"child_process";import{readFile as At,writeFile as O}from"fs/promises";var J,x,Ee,b,se=i(()=>{"use strict";u();J="npx ultracite format",x="./lefthook.yml",Ee=`pre-commit:
  jobs:
    - run: ${J}
      glob: 
        - "*.js"
        - "*.jsx"
        - "*.ts"
        - "*.tsx"
        - "*.json"
        - "*.jsonc"
        - "*.css"
      stage_fixed: true
`,b={exists:()=>o(x),install:e=>{ze(`${e} -D lefthook`),ze("npx lefthook install")},create:async()=>{await O(x,Ee)},update:async()=>{let e=await At(x,"utf-8");if(!e.includes(J))if(e.includes("pre-commit:"))if(e.includes("jobs:")){let t=`    - run: ${J}
      glob: 
        - "*.js"
        - "*.jsx"
        - "*.ts"
        - "*.tsx"
        - "*.json"
        - "*.jsonc"
        - "*.css"
      stage_fixed: true`,s=e.replace(/(pre-commit:\s*\n\s*jobs:\s*\n)/,`$1${t}
`);await O(x,s)}else{let t=`  jobs:
    - run: ${J}
      glob: 
        - "*.js"
        - "*.jsx"
        - "*.ts"
        - "*.tsx"
        - "*.json"
        - "*.jsonc"
        - "*.css"
      stage_fixed: true`,s=e.replace(/(pre-commit:\s*\n)/,`$1${t}
`);await O(x,s)}else await O(x,`${e}
${Ee}`)}}});var He={};l(He,{lint:()=>ne});import{execSync as Mt}from"child_process";import Ft from"process";var ne,oe=i(()=>{"use strict";ne=e=>{try{let t=e.length>0?e.map(s=>`"${s}"`).join(" "):"./";Mt(`npx @biomejs/biome check ${t}`,{stdio:"inherit"})}catch(t){let s=t instanceof Error?t.message:"Unknown error";console.error("Failed to run Ultracite:",s),Ft.exit(1)}}});var Ge={};l(Ge,{packageManager:()=>T});import{log as Rt,select as It}from"@clack/prompts";var Le,T,ae=i(()=>{"use strict";u();Le=[{hint:"Recommended",label:"pnpm",value:"pnpm add",lockfile:"pnpm-lock.yaml",monorepoSuffix:"-w"},{label:"bun",value:"bun add",lockfile:"bun.lockb",monorepoSuffix:""},{label:"yarn",value:"yarn add",lockfile:"yarn.lock",monorepoSuffix:""},{label:"npm",value:"npm install",lockfile:"package-lock.json",monorepoSuffix:"--workspace ."}],T={get:async()=>{let e=await P();e&&Rt.info("Monorepo detected, updating install command to include workspace flag");for(let t of Le)if(await o(t.lockfile))return e&&t.monorepoSuffix?`${t.value} ${t.monorepoSuffix}`:t.value;return null},select:async()=>{let e=await P(),t=await It({initialValue:"pnpm",message:"Which package manager do you use?",options:Le.map(s=>({label:s.label,value:e&&s.monorepoSuffix?`${s.value} ${s.monorepoSuffix}`:s.value}))});return typeof t!="string"?null:t}}});var Be={};l(Be,{title:()=>ie});var ie,re=i(()=>{"use strict";ie=`
888     888 888    88888888888 8888888b.         d8888  .d8888b. 8888888 88888888888 8888888888 
888     888 888        888     888   Y88b       d88888 d88P  Y88b  888       888     888        
888     888 888        888     888    888      d88P888 888    888  888       888     888        
888     888 888        888     888   d88P     d88P 888 888         888       888     8888888    
888     888 888        888     8888888P"     d88P  888 888         888       888     888        
888     888 888        888     888 T88b     d88P   888 888    888  888       888     888        
Y88b. .d88P 888        888     888  T88b   d8888888888 Y88b  d88P  888       888     888        
 "Y88888P"  88888888   888     888   T88b d88P     888  "Y8888P" 8888888     888     8888888888
`});var Ke={};l(Ke,{tsconfig:()=>U});import{readFile as $t,writeFile as _e}from"fs/promises";import Pt from"deepmerge";import{parse as Nt}from"jsonc-parser";var Ye,W,U,ce=i(()=>{"use strict";u();Ye={compilerOptions:{strictNullChecks:!0}},W="./tsconfig.json",U={exists:()=>o(W),create:()=>_e(W,JSON.stringify(Ye,null,2)),update:async()=>{let e=await $t(W,"utf-8"),s=Nt(e)||{},n=Pt(s,Ye);await _e(W,JSON.stringify(n,null,2))}}});var Xe={};l(Xe,{vscodeCopilot:()=>A});import{mkdir as Ze,writeFile as Ve}from"fs/promises";var le,A,ue=i(()=>{"use strict";f();u();le="./.github/copilot-instructions.md",A={exists:()=>o(le),create:async()=>{await Ze(".github",{recursive:!0}),await Ve(le,r)},update:async()=>{await Ze(".github",{recursive:!0}),await Ve(le,r)}}});var tt={};l(tt,{vscode:()=>M});import{mkdir as Ot,readFile as Jt,writeFile as Qe}from"fs/promises";import Tt from"deepmerge";import{parse as Wt}from"jsonc-parser";var et,z,M,de=i(()=>{"use strict";u();et={"editor.defaultFormatter":"esbenp.prettier-vscode","[javascript][typescript][javascriptreact][typescriptreact][json][jsonc][css][graphql]":{"editor.defaultFormatter":"biomejs.biome"},"typescript.tsdk":"node_modules/typescript/lib","editor.formatOnSave":!0,"editor.formatOnPaste":!0,"emmet.showExpandedAbbreviation":"never","editor.codeActionsOnSave":{"source.fixAll.biome":"explicit","source.organizeImports.biome":"explicit"}},z="./.vscode/settings.json",M={exists:()=>o(z),create:async()=>{await Ot(".vscode",{recursive:!0}),await Qe(z,JSON.stringify(et,null,2))},update:async()=>{let e=await Jt(z,"utf-8"),s=Wt(e)||{},n=Tt(s,et);await Qe(z,JSON.stringify(n,null,2))}}});var ot={};l(ot,{windsurf:()=>F});import{mkdir as st,writeFile as nt}from"fs/promises";var pe,F,me=i(()=>{"use strict";f();u();pe="./.windsurf/rules/ultracite.md",F={exists:()=>o(pe),create:async()=>{await st(".windsurf/rules",{recursive:!0}),await nt(pe,r)},update:async()=>{await st(".windsurf/rules",{recursive:!0}),await nt(pe,r)}}});var at={};l(at,{zed:()=>R});import{readFile as zt,writeFile as fe}from"fs/promises";var k,R,ge=i(()=>{"use strict";f();u();k="./.rules",R={exists:()=>o(k),create:async()=>{await fe(k,r)},update:async()=>{if(!await o(k)){await fe(k,r);return}let e=await zt(k,"utf-8");e.includes(r.trim())||await fe(k,`${e}

${r}`)}}});var qt,he=i(()=>{qt=ve({"./biome.ts":()=>(Y(),c(Ae)),"./claude.ts":()=>(Z(),c(Re)),"./codex.ts":()=>(X(),c($e)),"./cursor.ts":()=>(ee(),c(Oe)),"./format.ts":()=>(B(),c(Ce)),"./husky.ts":()=>(te(),c(We)),"./index.ts":()=>(ct(),c(Et)),"./initialize.ts":()=>(we(),c(rt)),"./lefthook.ts":()=>(se(),c(qe)),"./lint-staged.ts":()=>(ye(),c(it)),"./lint.ts":()=>(oe(),c(He)),"./package-manager.ts":()=>(ae(),c(Ge)),"./title.ts":()=>(re(),c(Be)),"./tsconfig.ts":()=>(ce(),c(Ke)),"./utils.ts":()=>(u(),c(je)),"./vscode-copilot.ts":()=>(ue(),c(Xe)),"./vscode-settings.ts":()=>(de(),c(tt)),"./windsurf.ts":()=>(me(),c(ot)),"./zed.ts":()=>(ge(),c(at))})});var it={};l(it,{lintStaged:()=>D});import{execSync as Ht}from"child_process";import{readFile as E,writeFile as g}from"fs/promises";import{pathToFileURL as Lt}from"url";import I from"deepmerge";import{parse as be}from"jsonc-parser";var m,lt,Gt,Bt,_t,Yt,Kt,Zt,Vt,Xt,Qt,xe,es,D,ye=i(()=>{"use strict";u();he();m={"*.{js,jsx,ts,tsx,json,jsonc,css,scss,md,mdx}":["npx ultracite format"]},lt=["./package.json","./.lintstagedrc.json","./.lintstagedrc.js","./.lintstagedrc.cjs","./.lintstagedrc.mjs","./lint-staged.config.js","./lint-staged.config.cjs","./lint-staged.config.mjs","./.lintstagedrc.yaml","./.lintstagedrc.yml","./.lintstagedrc"],Gt=(e,t,s,n)=>{let a=e.trim();if(a.includes(":")&&!a.startsWith("-")){s&&n.length>0&&(t[s]=n);let[p,...h]=a.split(":"),y=h.join(":").trim(),q=p.trim().replace(/['"]/g,"");return y&&y!==""?(y.startsWith("[")&&y.endsWith("]")?t[q]=y.slice(1,-1).split(",").map(dt=>dt.trim().replace(/['"]/g,"")):t[q]=y.replace(/['"]/g,""),{newCurrentKey:null,newCurrentArray:[]}):{newCurrentKey:q,newCurrentArray:[]}}if(a.startsWith("-")&&s){let p=[...n,a.slice(1).trim().replace(/['"]/g,"")];return{newCurrentKey:s,newCurrentArray:p}}return{newCurrentKey:s,newCurrentArray:n}},Bt=e=>{let t=e.split(`
`).filter(p=>p.trim()&&!p.trim().startsWith("#")),s={},n=null,a=[];for(let p of t){let h=Gt(p,s,n,a);n=h.newCurrentKey,a=h.newCurrentArray}return n&&a.length>0&&(s[n]=a),s},_t=e=>{let t="";for(let[s,n]of Object.entries(e))if(Array.isArray(n)){t+=`${s}:
`;for(let a of n)t+=`  - '${a}'
`}else t+=`${s}: '${n}'
`;return t},Yt=async()=>{try{let e=be(await E("./package.json","utf-8"));return e?e.type==="module":!1}catch{return!1}},Kt=async()=>{let e=be(await E("./package.json","utf-8"));e&&(e["lint-staged"]?e["lint-staged"]=I(e["lint-staged"],m):e["lint-staged"]=m,await g("./package.json",JSON.stringify(e,null,2)))},Zt=async e=>{let t=await E(e,"utf-8"),s=be(t);if(!s)return;let n=I(s,m);await g(e,JSON.stringify(n,null,2))},Vt=async e=>{let t=await E(e,"utf-8"),s=Bt(t);if(!s)return;let n=I(s,m);await g(e,_t(n))},Xt=async e=>{let n=(await import(Lt(e).href)).default||{},a=I(n,m),p=`export default ${JSON.stringify(a,null,2)};
`;await g(e,p)},Qt=async e=>{delete L.cache[L.resolve(`./${e}`)];let t=qt(`./${e}`),s=I(t,m),n=`module.exports = ${JSON.stringify(s,null,2)};
`;await g(e,n)},xe=async()=>{await g(".lintstagedrc.json",JSON.stringify(m,null,2))},es=async e=>{if(e==="./package.json"){await Kt();return}if(e.endsWith(".json")||e==="./.lintstagedrc"){await Zt(e);return}if(e.endsWith(".yaml")||e.endsWith(".yml")){await Vt(e);return}let t=await Yt();if(e.endsWith(".mjs")||e.endsWith(".js")&&t){try{await Xt(e)}catch{await xe()}return}if(e.endsWith(".cjs")||e.endsWith(".js")&&!t)try{await Qt(e)}catch{await xe()}},D={exists:async()=>{for(let e of lt)if(await o(e))return!0;return!1},install:e=>{Ht(`${e} -D lint-staged`)},create:async()=>{await g(".lintstagedrc.json",JSON.stringify(m,null,2))},update:async()=>{let e=null;for(let t of lt)if(await o(t)){e=t;break}if(!e){await xe();return}await es(e)}}});var rt={};l(rt,{initialize:()=>De});import{execSync as ts}from"child_process";import ss from"process";import{intro as ns,log as ke,multiselect as ut,spinner as d}from"@clack/prompts";var os,as,is,rs,cs,ls,us,ds,ps,ms,fs,gs,hs,De,we=i(()=>{"use strict";Y();Z();X();ee();te();se();ye();ae();re();ce();ue();de();me();ge();os=e=>{let t=d();t.start("Installing dependencies..."),ts(`${e} -D -E ultracite @biomejs/biome@2.0.5`),t.stop("Dependencies installed.")},as=async()=>{let e=d();if(e.start("Checking for tsconfig.json..."),await U.exists()){e.message("tsconfig.json found, updating..."),await U.update(),e.stop("tsconfig.json updated.");return}e.message("tsconfig.json not found, creating..."),await U.create(),e.stop("tsconfig.json created.")},is=async()=>{let e=d();if(e.start("Checking for .vscode/settings.json..."),await M.exists()){e.message("settings.json found, updating..."),await M.update(),e.stop("settings.json updated.");return}e.message("settings.json not found, creating..."),await M.create(),e.stop("settings.json created.")},rs=async()=>{let e=d();if(e.start("Checking for Biome configuration..."),await v.exists()){e.message("Biome configuration found, updating..."),await v.update(),e.stop("Biome configuration updated.");return}e.message("Biome configuration not found, creating..."),await v.create(),e.stop("Biome configuration created.")},cs=async e=>{let t=d();if(t.start("Initializing pre-commit hooks..."),t.message("Installing Husky..."),w.install(e),await w.exists()){t.message("Pre-commit hook found, updating..."),await w.update(),t.stop("Pre-commit hook updated.");return}t.message("Updating pre-commit hook..."),t.message("Pre-commit hook not found, creating..."),await w.create(),t.stop("Pre-commit hook created.")},ls=async e=>{let t=d();if(t.start("Initializing lefthook..."),t.message("Installing lefthook..."),b.install(e),await b.exists()){t.message("lefthook.yml found, updating..."),await b.update(),t.stop("lefthook.yml updated.");return}t.message("lefthook.yml not found, creating..."),await b.create(),t.stop("lefthook.yml created.")},us=async e=>{let t=d();if(t.start("Initializing lint-staged..."),t.message("Installing lint-staged..."),D.install(e),await D.exists()){t.message("lint-staged found, updating..."),await D.update(),t.stop("lint-staged updated.");return}t.message("lint-staged not found, creating..."),await D.create(),t.stop("lint-staged created.")},ds=async()=>{let e=d();if(e.start("Checking for GitHub Copilot rules..."),await A.exists()){e.message("GitHub Copilot rules found, updating..."),await A.update(),e.stop("GitHub Copilot rules updated.");return}e.message("GitHub Copilot rules not found, creating..."),await A.create(),e.stop("GitHub Copilot rules created.")},ps=async()=>{let e=d();if(e.start("Checking for Cursor rules..."),await S.exists()){e.message("Cursor rules found, updating..."),await S.update(),e.stop("Cursor rules updated.");return}e.message("Cursor rules not found, creating..."),await S.create(),e.stop("Cursor rules created.")},ms=async()=>{let e=d();if(e.start("Checking for Windsurf rules..."),await F.exists()){e.message("Windsurf rules found, updating..."),await F.update(),e.stop("Windsurf rules updated.");return}e.message("Windsurf rules not found, creating..."),await F.create(),e.stop("Windsurf rules created.")},fs=async()=>{let e=d();if(e.start("Checking for Zed rules..."),await R.exists()){e.message("Zed rules found, updating..."),await R.update(),e.stop("Zed rules updated.");return}e.message("Zed rules not found, creating..."),await R.create(),e.stop("Zed rules created.")},gs=async()=>{let e=d();if(e.start("Checking for Claude Code rules..."),await C.exists()){e.message("Claude Code rules found, updating..."),await C.update(),e.stop("Claude Code rules updated.");return}e.message("Claude Code rules not found, creating..."),await C.create(),e.stop("Claude Code rules created.")},hs=async()=>{let e=d();if(e.start("Checking for OpenAI Codex rules..."),await j.exists()){e.message("OpenAI Codex rules found, updating..."),await j.update(),e.stop("OpenAI Codex rules updated.");return}e.message("OpenAI Codex rules not found, creating..."),await j.create(),e.stop("OpenAI Codex rules created.")},De=async()=>{ns(ie);try{let e=await T.get();if(e?ke.info(`Detected lockfile, using ${e}`):e=await T.select(),!e||typeof e!="string")throw new Error("No package manager selected");let t=await ut({message:"Which editor rules do you want to enable (optional)?",options:[{label:"GitHub Copilot (VSCode)",value:"vscode-copilot"},{label:"Cursor",value:"cursor"},{label:"Windsurf",value:"windsurf"},{label:"Zed",value:"zed"},{label:"Claude Code",value:"claude"},{label:"OpenAI Codex",value:"codex"}],required:!1}),s=await ut({message:"Would you like any of the following (optional)?",options:[{label:"Husky pre-commit hook",value:"precommit-hooks"},{label:"Lefthook pre-commit hook",value:"lefthook"},{label:"Lint-staged",value:"lint-staged"}],required:!1});os(e),await as(),await is(),await rs(),Array.isArray(t)&&(t.includes("vscode-copilot")&&await ds(),t.includes("cursor")&&await ps(),t.includes("windsurf")&&await ms(),t.includes("zed")&&await fs(),t.includes("claude")&&await gs(),t.includes("codex")&&await hs()),Array.isArray(s)&&(s.includes("precommit-hooks")&&await cs(e),s.includes("lefthook")&&await ls(e),s.includes("lint-staged")&&await us(e)),ke.success("Successfully initialized Ultracite configuration!")}catch(e){let t=e instanceof Error?e.message:"Unknown error";ke.error(`Failed to initialize Ultracite configuration: ${t}`),ss.exit(1)}}});var Et={};import{Command as ys}from"commander";var $,ct=i(()=>{B();we();oe();$=new ys;$.name("Ultracite").description("Ship code faster and with more confidence.");$.command("init").description("Initialize Ultracite in the current directory").action(De);$.command("lint").description("Run Biome linter without fixing files").argument("[files...]","specific files to lint (optional)").action(ne);$.command("format").description("Run Biome linter and fixes files").argument("[files...]","specific files to format (optional)").option("--unsafe","apply unsafe fixes").action(G);$.parse()});ct();
